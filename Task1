import { useEffect, useRef } from "react";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import * as THREE from "three";
gsap.registerPlugin(ScrollTrigger);

export default function Portfolio() {
  const heroRef = useRef(null);
  const aboutRef = useRef(null);
  const canvasRef = useRef(null);

  useEffect(() => {
    // Hero animation
    gsap.from(heroRef.current, {
      y: -100,
      opacity: 0,
      duration: 1.5,
      ease: "power4.out",
    });

    // About section scroll animation
    gsap.from(aboutRef.current, {
      scrollTrigger: {
        trigger: aboutRef.current,
        start: "top 80%",
      },
      x: -150,
      opacity: 0,
      duration: 1.2,
      ease: "power3.out",
    });

    // Three.js setup
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    camera.position.z = 2;

    const geometry = new THREE.TorusKnotGeometry(0.5, 0.2, 100, 16);
    const material = new THREE.MeshStandardMaterial({ color: 0x7f00ff });
    const torus = new THREE.Mesh(geometry, material);
    scene.add(torus);

    const light = new THREE.PointLight(0xffffff, 1);
    light.position.set(5, 5, 5);
    scene.add(light);

    const controls = new OrbitControls(camera, renderer.domElement);

    const animate = () => {
      requestAnimationFrame(animate);
      torus.rotation.x += 0.01;
      torus.rotation.y += 0.01;
      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    window.addEventListener("resize", () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  }, []);

  return (
    <div className="relative bg-gradient-to-b from-black via-gray-900 to-black text-white min-h-screen overflow-hidden">
      <canvas ref={canvasRef} className="absolute top-0 left-0 w-full h-full z-0" />
      <section
        ref={heroRef}
        className="relative z-10 flex flex-col items-center justify-center h-screen text-center p-4"
      >
        <h1 className="text-6xl font-extrabold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-indigo-400 to-purple-600 animate-fade-in">
          Hi, I'm Ravi
        </h1>
        <p className="text-2xl mb-8">Creative Developer & UI Enthusiast</p>
        <a
          href="#about"
          className="px-8 py-4 bg-purple-600 text-white rounded-full hover:bg-purple-500 transition-all duration-300"
        >
          Explore More
        </a>
      </section>

      <section
        ref={aboutRef}
        id="about"
        className="relative z-10 p-10 max-w-4xl mx-auto text-center"
      >
        <h2 className="text-4xl font-bold mb-6">About Me</h2>
        <p className="text-lg text-gray-300 leading-relaxed">
          I specialize in building stunning web experiences using React, GSAP, and Three.js. My work blends design
          and functionality through smooth transitions and cutting-edge visuals.
        </p>
      </section>

      {/* Additional sections like Projects, Skills, and Contact can go here with animated components */}
    </div>
  );
}
